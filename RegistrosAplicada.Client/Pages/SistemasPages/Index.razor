@page "/Sistemas"
@inject NavigationManager NavigationManager
@inject HttpClient httpClient

<PageTitle>Registro de Sistemas</PageTitle>
<div class="container">

	<div class="card shadow-lg">
		<div class="card-header alert-secondary" style="color: white; background-color: royalblue;">
			<NavLink class="btn btn-light float-end" href="/CreateSistemas">Registrar Sistema</NavLink>
			<h1>Consultas</h1>
			<h3>Sistema</h3>
		</div>

		<div class="col-12">
			<table class="table table-striped table-bordered justify-content">
				<thead>
					<tr class="text-center">
						<th>Id</th>
						<th>Nombre</th>
						<th>Editar</th>
						<th>Eliminar</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var sistema in listaSistemas)
					{
						<tr class="text-center">
							<td>@sistema.ID</td>
							<td>@sistema.Nombre</td>
							<td><button class="btn btn-primary bi bi-pencil" @onclick="() => Editar(sistema)"></button></td>
							<td><button class="btn btn-danger bi bi-trash" @onclick="() => Eliminar()"></button></td>
						</tr>
					}
					@if (sistemaEditando.HasValue)
					{
						<tr>
							<td colspan="4">

								<EditForm Model="sistema" OnValidSubmit="GuardarSistema">
									<div class="form-group">
										<label for="ID">ID:</label>
										<input id="ID" @bind="sistema.ID" class="form-control" disabled />
									</div>
									<div class="form-group">
										<label for="Nombre">Nombre:</label>
										<input id="Nombre" @bind="sistema.Nombre" class="form-control" />
									</div>
									<div class="form-group">
										<span class="text-danger">@mensaje</span>
									</div>
									<button type="submit" class="btn btn-success bi bi-floppy">Guardar Cambios</button>
								</EditForm>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
</div>

@code {
	public Sistemas sistema { get; set; } = new Sistemas();
	public List<Sistemas> listaSistemas = new List<Sistemas>();
	public int? sistemaEditando = null;
	public string mensaje = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await ListarSistemas();
	}

	private async Task ListarSistemas()
	{
		HttpResponseMessage response = await httpClient.GetAsync("api/Sistemas");
		if (response.IsSuccessStatusCode)
		{
			listaSistemas = await response.Content.ReadFromJsonAsync<List<Sistemas>>();
		}
		else
		{
			mensaje = "Error al obtener la lista de sistemas";
		}
	}

	private async Task GuardarSistema()
	{
		HttpResponseMessage response = await httpClient.PostAsJsonAsync("api/Sistemas", sistema);
		if (response.IsSuccessStatusCode)
		{
			sistema = new Sistemas();
			await ListarSistemas();
		}
		else
		{
			mensaje = "Error al guardar el sistema";
		}
	}

	private void Editar(Sistemas sistema)
	{
		this.sistema = sistema;
		sistemaEditando = sistema.ID;
	}
	void Eliminar()
	{
		NavigationManager.NavigateTo("/DeleteSistemas");
	}
}
