@page "/DeletePrioridades/{PrioridadesId:int}"
@using Shared.Models
@inject HttpClient httpClient
@inject NavigationManager navigation

<PageTitle>Eliminar Prioridad</PageTitle>
<EditForm Model="prioridades" OnValidSubmit="EliminarPrioridad">
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h2>Eliminar</h2>
            </div>

            <div class="card-body">
                <h3 class="text-danger text-center">¿Seguro que quiere eliminar?</h3>
                <ul>
                    <li>Prioridad Id: @prioridades.PrioridadesId</li>
                    <li>Descripción: @prioridades.Descripcion</li>
                    <li>Días compromiso: @prioridades.DiasCompromiso</li>
                </ul>
            </div>
            <div class="card-footer text-center">
                <div class="input-group">
                    <button type="submit" class="btn btn-danger">Sí</button>
                    <button type="button" class="btn btn-success" @onclick="Cancelar">Volver</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PrioridadesId { get; set; }
    public Prioridades prioridades { get; set; } = new Prioridades();
    public string mensaje { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        if (PrioridadesId > 0)
        {
            prioridades = await httpClient.GetFromJsonAsync<Prioridades>($"api/Prioridades/{PrioridadesId}");
        }
    }

    public async Task EliminarPrioridad()
    {
        var response = await httpClient.DeleteAsync($"api/Prioridades/{PrioridadesId}");
        if (response.IsSuccessStatusCode)
        {
            mensaje = "Eliminado correctamente";
            navigation.NavigateTo("/Prioridades");
        }
    }

    private void Cancelar()
    {
        navigation.NavigateTo("/Prioridades");
    }
}
